[
  {
    "version": 1,
    "name": "AzureTts",
    "pluginId": "mk.azure.tts",
    "author": "mkXultra",
    "defVars": {
      "apiKey": {
        "label": "API-KEY",
        "hint": "Azure API-KEY"
      },
      "manualLangSpeed": {
        "label": "Manual Language Speed",
        "hint": "Manual Language Speed"
      },
      "region": {
        "label": "Region",
        "hint": "Region"
      }
    },
    "code": "let apiKey = ttsrv.userVars[\"apiKey\"]\nlet manualLangSpeed = ttsrv.userVars[\"manualLangSpeed\"]\nlet region = ttsrv.userVars[\"region\"]\nlet defaultVoice = \"en-US-AvaNeural\"\nlet jpDefaultVoice = \"ja-JP-NanamiNeural\"\nlet jpDefaultMaleVoice = \"ja-JP-DaichiNeural\"\n\nlet PluginJS = {\n    \"name\": \"AzureTts\",\n    \"pluginId\": \"mk.azure.tts\",\n    \"author\": \"mkXultra\",\n    \"description\": \"Azure Text-to-Speech API\",\n    \"version\": 1,\n\n    \"vars\": {\n        apiKey: {label: \"API-KEY\", hint: \"Azure API-KEY\"},\n        manualLangSpeed: {label: \"Manual Language Speed\", hint: \"Manual Language Speed\"},\n        region: {label: \"Region\", hint: \"Region\"},\n    },\n\n    \"getAudio\": function (text, locale, voice, rate, volume, pitch) {\n        return getAudio(text, voice, rate, volume, pitch)\n    },\n}\n\n\nfunction getGender(voiceCode) {\n    let voices = EditorJS.getVoices(\"en-US\");\n    return voices[voiceCode] && voices[voiceCode].startsWith(\"MALE\") ? \"MALE\" : \"FEMALE\";\n}\n\nfunction isEnglish(text) {\n  // 日本語の文字コード範囲\n  const japaneseRanges = [\n    { start: 0x3040, end: 0x309F }, // ひらがな\n    { start: 0x30A0, end: 0x30FF }, // カタカナ\n    { start: 0x4E00, end: 0x9FFF }  // 漢字\n  ];\n\n  // 文字列内の各文字をチェック\n  for (let i = 0; i < text.length; i++) {\n    let charCode = text.charCodeAt(i);\n    \n    // 日本語の文字コード範囲内にあるかチェック\n    for (let range of japaneseRanges) {\n      if (charCode >= range.start && charCode <= range.end) {\n        return false;\n      }\n    }\n  }\n\n  // 日本語の文字が見つからなかった場合は英語と判断\n  return true;\n}\n\nfunction getAudio(text, voice, rate, volume, pitch) {\n    logger.i(\"getAudio\")\n    logger.i(\"rate: \" + rate)\n    let speed = rate\n    if (voice === null || voice === \"\") {\n        voice = defaultVoice\n    }\n    if (rate === null || rate === \"\" || rate === 0) {\n        speed = 1\n    } else{\n        // kindle reader speed is 1 = 20%\n        speed = (parseFloat(rate) / 20)\n        // Ensure rate is within the valid range\n        speed = Math.max(0.25, Math.min(1.5, parseFloat(speed)))\n    }\n    logger.i(\"speed: \" + speed)\n    if(manualLangSpeed < 3){\n        jpSpeed = manualLangSpeed\n    }\n\n    let xmlBody;\n    let reqHeaders = {\n        'Ocp-Apim-Subscription-Key': apiKey,\n        'Content-Type': 'application/ssml+xml',\n        'X-Microsoft-OutputFormat': 'ogg-24khz-16bit-mono-opus',\n        'User-Agent': 'tts-server-plugin-mk-azure'\n    };\n\n    if (isEnglish(text)) {\n        let prosodyRate;\n        if (speed >= 1.1) {\n            prosodyRate = `+${((speed - 1) * 100).toFixed(0)}%`;\n        } else if (speed <= 0.9) {\n            prosodyRate = `-${((1 - speed) * 100).toFixed(0)}%`;\n        } else {\n            prosodyRate = `${speed}`;\n        }\n        let prosodyTag = speed !== 1 ? `<prosody rate=\"${prosodyRate}\">${text}</prosody>` : text;\n        xmlBody = `\n        <speak version='1.0' xml:lang='en-US'>\n            <voice xml:lang='en-US' xml:gender='${getGender(voice)}' name='${voice}'>\n                ${prosodyTag}\n            </voice>\n        </speak>`;\n    }else{\n        let prosodyRate;\n        if (jpSpeed >= 1.1) {\n            prosodyRate = `+${((jpSpeed - 1) * 100).toFixed(0)}%`;\n        } else if (jpSpeed <= 0.9) {\n            prosodyRate = `-${((1 - jpSpeed) * 100).toFixed(0)}%`;\n        } else {\n            prosodyRate = `${jpSpeed}`;\n        }\n        let prosodyTag = jpSpeed !== 1 ? `<prosody rate=\"${prosodyRate}\">${text}</prosody>` : text;\n\n        const gender = getGender(voice);\n        let jpFEMALEVoice = \"ja-JP-MayuNeural\"\n        if (voice == defaultVoice){\n            jpFEMALEVoice = jpDefaultVoice\n        }\n        let jpVoice = gender == \"FEMALE\" ? jpFEMALEVoice : jpDefaultMaleVoice\n\n        xmlBody = `\n        <speak version='1.0' xml:lang='ja-JP'>\n            <voice xml:lang='ja-JP' xml:gender='${getGender(voice)}' name='${jpVoice}'>\n                ${prosodyTag}\n            </voice>\n        </speak>`;\n    }\n\n    let resp = ttsrv.httpPost(`https://${region}.tts.speech.microsoft.com/cognitiveservices/v1`, xmlBody, reqHeaders)\n    if (resp.isSuccessful()) {\n        return resp.body().byteStream()\n    } else {\n        throw \"FAILED: status=\" + resp.code() + \" body=\" + resp.body().string() + \" params=\" + \"text=\" + text + \" voice=\" + voice + \" rate=\" + rate + \" volume=\" + volume + \" pitch=\" + pitch\n    }\n}\n\nlet EditorJS = {\n    'getAudioSampleRate': function (locale, voice) {\n         let audio = PluginJS.getAudio('test', locale, voice, 20, 50, 50)\n         return ttsrv.getAudioSampleRate(audio)\n//        return 22050\n    },\n\n    \"getLocales\": function () {\n        return [\"en-US\"]\n    },\n\n    \"getVoices\": function (locale) {\n        return {\n\n            // \"en-US-AndrewMultilingualNeural4\": \"MALE en-US-AndrewMultilingualNeural4\",\n            // \"en-US-EmmaMultilingualNeural4\": \"FEMALE en-US-EmmaMultilingualNeural4\",\n            // \"en-US-BrianMultilingualNeural4\": \"MALE en-US-BrianMultilingualNeural4\",\n\n            // default\n            defaultVoice: `FEMALE ${defaultVoice}`,\n            \"en-US-AndrewNeural\": \"MALE en-US-AndrewNeural\",\n            \"en-US-EmmaNeural\": \"FEMALE en-US-EmmaNeural\",\n            \"en-US-BrianNeural\": \"MALE en-US-BrianNeural\",\n            \"en-US-JennyNeural\": \"FEMALE en-US-JennyNeural\",\n            \"en-US-GuyNeural\": \"MALE en-US-GuyNeural\",\n            \"en-US-AriaNeural\": \"FEMALE en-US-AriaNeural\",\n            \"en-US-DavisNeural\": \"MALE en-US-DavisNeural\",\n            \"en-US-JaneNeural\": \"FEMALE en-US-JaneNeural\",\n            \"en-US-JasonNeural\": \"MALE en-US-JasonNeural\",\n            \"en-US-SaraNeural\": \"FEMALE en-US-SaraNeural\",\n            \"en-US-TonyNeural\": \"MALE en-US-TonyNeural\",\n            \"en-US-NancyNeural\": \"FEMALE en-US-NancyNeural\",\n            \"en-US-AmberNeural\": \"FEMALE en-US-AmberNeural\",\n            \"en-US-AnaNeural\": \"FEMALE en-US-AnaNeural\",\n            \"en-US-AshleyNeural\": \"FEMALE en-US-AshleyNeural\",\n            \"en-US-BrandonNeural\": \"MALE en-US-BrandonNeural\",\n            \"en-US-ChristopherNeural\": \"MALE en-US-ChristopherNeural\",\n            \"en-US-CoraNeural\": \"FEMALE en-US-CoraNeural\",\n            \"en-US-ElizabethNeural\": \"FEMALE en-US-ElizabethNeural\",\n            \"en-US-EricNeural\": \"MALE en-US-EricNeural\",\n            \"en-US-JacobNeural\": \"MALE en-US-JacobNeural\",\n            \"en-US-JennyMultilingualNeural4\": \"FEMALE en-US-JennyMultilingualNeural4\",\n            \"en-US-MichelleNeural\": \"FEMALE en-US-MichelleNeural\",\n            \"en-US-MonicaNeural\": \"FEMALE en-US-MonicaNeural\",\n            \"en-US-RogerNeural\": \"MALE en-US-RogerNeural\",\n            \"en-US-RyanMultilingualNeural4\": \"MALE en-US-RyanMultilingualNeural4\",\n            \"en-US-SteffanNeural\": \"MALE en-US-SteffanNeural\",\n            \"en-US-AIGenerate1Neural1\": \"MALE en-US-AIGenerate1Neural1\",\n            \"en-US-AIGenerate2Neural1\": \"FEMALE en-US-AIGenerate2Neural1\",\n            \"en-US-AlloyTurboMultilingualNeural1\": \"MALE en-US-AlloyTurboMultilingualNeural1\",\n            \"en-US-BlueNeural1\": \"NEUTRAL en-US-BlueNeural1\",\n            \"en-US-KaiNeural1\": \"MALE en-US-KaiNeural1\",\n            \"en-US-LunaNeural1\": \"FEMALE en-US-LunaNeural1\",\n            \"en-US-NovaTurboMultilingualNeural1\": \"FEMALE en-US-NovaTurboMultilingualNeural1\",\n            \"en-US-AlloyMultilingualNeural5\": \"MALE en-US-AlloyMultilingualNeural5\",\n            \"en-US-EchoMultilingualNeural5\": \"MALE en-US-EchoMultilingualNeural5\",\n            \"en-US-FableMultilingualNeural5\": \"NEUTRAL en-US-FableMultilingualNeural5\",\n            \"en-US-OnyxMultilingualNeural5\": \"MALE en-US-OnyxMultilingualNeural5\",\n            \"en-US-NovaMultilingualNeural5\": \"FEMALE en-US-NovaMultilingualNeural5\",\n            \"en-US-ShimmerMultilingualNeural5\": \"FEMALE en-US-ShimmerMultilingualNeural5\",\n            \"en-US-AlloyMultilingualNeuralHD5\": \"MALE en-US-AlloyMultilingualNeuralHD5\",\n            \"en-US-EchoMultilingualNeuralHD5\": \"MALE en-US-EchoMultilingualNeuralHD5\",\n            \"en-US-FableMultilingualNeuralHD5\": \"NEUTRAL en-US-FableMultilingualNeuralHD5\",\n            \"en-US-OnyxMultilingualNeuralHD5\": \"MALE en-US-OnyxMultilingualNeuralHD5\",\n            \"en-US-NovaMultilingualNeuralHD5\": \"FEMALE en-US-NovaMultilingualNeuralHD5\",\n            \"en-US-ShimmerMultilingualNeuralHD5\": \"FEMALE en-US-ShimmerMultilingualNeuralHD5\"\n        }\n    },\n\n    \"onLoadData\": function () {},\n\n    \"onLoadUI\": function (ctx, linerLayout) {\n        let cb = new CheckBox(ctx)\n        cb.setText(\"Background music (only supported for special voices)\")\n        cb.setChecked(ttsrv.tts.data[\"bgm\"] == \"true\")\n        cb.setOnCheckedChangeListener(function (view, isChecked) {\n            ttsrv.tts.data[\"bgm\"] = isChecked + ''\n        })\n        linerLayout.addView(cb)\n        ttsrv.setMargins(cb, 0, 8, 10, 0)\n    },\n\n    \"onVoiceChanged\": function (locale, voiceCode) {\n\n    }\n}\n\n"
  }
]
