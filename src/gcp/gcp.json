[
  {
    "version": 2,
    "name": "GCPTTS",
    "pluginId": "mk.gcp.tts",
    "author": "mkXultra",
    "defVars": {
      "apiKey": {
        "label": "ApiKey"
      },
      "manualLangSpeed": {
        "label": "Manual-Language-Speed"
      }
    },
    "code": "let apiKey = ttsrv.userVars[\"apiKey\"]\nlet manualLangSpeed = ttsrv.userVars[\"manualLangSpeed\"]\nlet defaultVoice = \"en-US-Journey-F\"\nlet jpDefaultVoice = \"ja-JP-Wavenet-A\"\n\nlet PluginJS = {\n    \"name\": \"GCPTTS\",\n    \"pluginId\": \"mk.gcp.tts\",\n    \"author\": \"mkXultra\",\n    \"description\": \"Google Cloud Text-to-Speech API\",\n    \"version\": 1,\n\n    \"vars\": {\n        apiKey: {label: \"API-KEY\", hint: \"Google Cloud API-KEY\"},\n        manualLangSpeed: {label: \"Manual Language Speed\", hint: \"Manual Language Speed\"},\n    },\n\n    \"getAudio\": function (text, locale, voice, rate, volume, pitch) {\n        return getAudio(text, voice, rate, volume, pitch)\n    },\n}\n\nfunction getGender(voiceCode) {\n    let voices = EditorJS.getVoices(\"en-US\");\n    return voices[voiceCode] && voices[voiceCode].startsWith(\"MALE\") ? \"MALE\" : \"FEMALE\";\n}\n\nfunction base64ToByteArray(base64) {\n    var decoder = java.util.Base64.getDecoder();\n    return decoder.decode(base64);\n}\n\nfunction isEnglish(text) {\n  // 日本語の文字コード範囲\n  const japaneseRanges = [\n    { start: 0x3040, end: 0x309F }, // ひらがな\n    { start: 0x30A0, end: 0x30FF }, // カタカナ\n    { start: 0x4E00, end: 0x9FFF }  // 漢字\n  ];\n\n  // 文字列内の各文字をチェック\n  for (let i = 0; i < text.length; i++) {\n    let charCode = text.charCodeAt(i);\n    \n    // 日本語の文字コード範囲内にあるかチェック\n    for (let range of japaneseRanges) {\n      if (charCode >= range.start && charCode <= range.end) {\n        return false;\n      }\n    }\n  }\n\n  // 日本語の文字が見つからなかった場合は英語と判断\n  return true;\n}\n\nfunction getAudio(text, voice, rate, volume, pitch) {\n    let speed = rate\n    let jpSpeed = 1\n    if (voice === null || voice === \"\") {\n        voice = defaultVoice\n    }\n    if (rate === null || rate === \"\" || rate === 0) {\n        speed = 1\n    } else{\n        // kindle reader speed is 1 = 20%\n        speed = (parseFloat(rate) / 20)\n        // Ensure rate is within the valid range\n        speed = Math.max(0.25, Math.min(4.0, parseFloat(speed)))\n    }\n\n    if(manualLangSpeed < 3){\n        jpSpeed = manualLangSpeed\n    }\n\n    let reqHeaders = {\n        'Content-Type': 'application/json; charset=utf-8',\n        'X-Goog-Api-Key': apiKey\n    }\n\n    if (isEnglish(text)) {\n        body = {\n            \"input\": {\n                \"text\": text\n            },\n            \"voice\": {\n                \"languageCode\": \"en-US\",\n                \"name\": voice\n            },\n            \"audioConfig\": {\n                \"audioEncoding\": \"OGG_OPUS\",\n                \"speakingRate\": speed\n            }\n        }\n    }else{\n        const gender = getGender(voice);\n        let jpFEMALEVoice = \"ja-JP-Neural2-B\"\n        if (voice == defaultVoice){\n            jpFEMALEVoice = jpDefaultVoice\n        }\n        let jpVoice = gender == \"FEMALE\" ? jpFEMALEVoice : \"ja-JP-Neural2-D\"\n        body = {\n            \"input\": {\n                \"text\": text\n            },\n            \"voice\": {\n                \"languageCode\": \"ja-JP\",\n                \"name\": jpVoice\n            },\n            \"audioConfig\": {\n                \"audioEncoding\": \"OGG_OPUS\",\n                \"speakingRate\": jpSpeed\n            }\n        }\n    }\n    let str = JSON.stringify(body)\n    let resp = ttsrv.httpPost('https://texttospeech.googleapis.com/v1/text:synthesize', str, reqHeaders)\n\n    if (resp.isSuccessful()) {\n        let audioContent = JSON.parse(resp.body().string()).audioContent;\n        return base64ToByteArray(audioContent)\n    } else {\n        throw \"FAILED: status=\" + resp.code() + \" body=\" + resp.body() + \" params=\" + \"text=\" + text + \" voice=\" + voice + \" rate=\" + rate + \" volume=\" + volume + \" pitch=\" + pitch\n    }\n}\n\nlet EditorJS = {\n    'getAudioSampleRate': function (locale, voice) {\n         let audio = PluginJS.getAudio('test', locale, voice, 20, 50, 50)\n         return ttsrv.getAudioSampleRate(audio)\n//        return 22050\n    },\n\n    \"getLocales\": function () {\n        return [\"en-US\"]\n    },\n\n    \"getVoices\": function (locale) {\n        return {\n            // default\n            \"en-US-Journey-F\": \"FEMALE en-US-Journey-F\",\n\n            \"en-US-Casual-K\": \"MALE en-US-Casual-K\",\n            \"en-US-Journey-D\": \"MALE en-US-Journey-D\",\n            \"en-US-Journey-F\": \"FEMALE en-US-Journey-F\",\n            \"en-US-Journey-O\": \"FEMALE en-US-Journey-O\",\n            \"en-US-Neural2-A\": \"MALE en-US-Neural2-A\",\n            \"en-US-Neural2-C\": \"FEMALE en-US-Neural2-C\",\n            \"en-US-Neural2-D\": \"MALE en-US-Neural2-D\",\n            \"en-US-Neural2-E\": \"FEMALE en-US-Neural2-E\",\n            \"en-US-Neural2-F\": \"FEMALE en-US-Neural2-F\",\n            \"en-US-Neural2-G\": \"FEMALE en-US-Neural2-G\",\n            \"en-US-Neural2-H\": \"FEMALE en-US-Neural2-H\",\n            \"en-US-Neural2-I\": \"MALE en-US-Neural2-I\",\n            \"en-US-Neural2-J\": \"MALE en-US-Neural2-J\",\n            \"en-US-News-K\": \"FEMALE en-US-News-K\",\n            \"en-US-News-L\": \"FEMALE en-US-News-L\",\n            \"en-US-News-N\": \"MALE en-US-News-N\",\n            \"en-US-Polyglot-1\": \"MALE en-US-Polyglot-1\",\n            \"en-US-Standard-A\": \"MALE en-US-Standard-A\",\n            \"en-US-Standard-B\": \"MALE en-US-Standard-B\",\n            \"en-US-Standard-C\": \"FEMALE en-US-Standard-C\",\n            \"en-US-Standard-D\": \"MALE en-US-Standard-D\",\n            \"en-US-Standard-E\": \"FEMALE en-US-Standard-E\",\n            \"en-US-Standard-F\": \"FEMALE en-US-Standard-F\",\n            \"en-US-Standard-G\": \"FEMALE en-US-Standard-G\",\n            \"en-US-Standard-H\": \"FEMALE en-US-Standard-H\",\n            \"en-US-Standard-I\": \"MALE en-US-Standard-I\",\n            \"en-US-Standard-J\": \"MALE en-US-Standard-J\",\n            \"en-US-Studio-O\": \"FEMALE en-US-Studio-O\",\n            \"en-US-Studio-Q\": \"MALE en-US-Studio-Q\",\n            \"en-US-Wavenet-A\": \"MALE en-US-Wavenet-A\",\n            \"en-US-Wavenet-B\": \"MALE en-US-Wavenet-B\",\n            \"en-US-Wavenet-C\": \"FEMALE en-US-Wavenet-C\",\n            \"en-US-Wavenet-D\": \"MALE en-US-Wavenet-D\",\n            \"en-US-Wavenet-E\": \"FEMALE en-US-Wavenet-E\",\n            \"en-US-Wavenet-F\": \"FEMALE en-US-Wavenet-F\",\n            \"en-US-Wavenet-G\": \"FEMALE en-US-Wavenet-G\",\n            \"en-US-Wavenet-H\": \"FEMALE en-US-Wavenet-H\",\n            \"en-US-Wavenet-I\": \"MALE en-US-Wavenet-I\",\n            \"en-US-Wavenet-J\": \"MALE en-US-Wavenet-J\"\n        }\n    },\n\n    \"onLoadData\": function () {},\n\n    \"onLoadUI\": function (ctx, linerLayout) {\n        let cb = new CheckBox(ctx)\n        cb.setText(\"Background music (only supported for special voices)\")\n        cb.setChecked(ttsrv.tts.data[\"bgm\"] == \"true\")\n        cb.setOnCheckedChangeListener(function (view, isChecked) {\n            ttsrv.tts.data[\"bgm\"] = isChecked + ''\n        })\n        linerLayout.addView(cb)\n        ttsrv.setMargins(cb, 0, 8, 10, 0)\n    },\n\n    \"onVoiceChanged\": function (locale, voiceCode) {\n\n    }\n}"
  }
]
