[
  {
    "version": 1,
    "name": "OpenAItts",
    "pluginId": "mk.openai.tts",
    "author": "mkXultra",
    "defVars": {
      "apiKey": {
        "label": "ApiKey"
      }
    },
    "code": "let apiKey = ttsrv.userVars[\"apiKey\"]\nlet sampleRate = 16000\n\nlet PluginJS = {\n    \"name\": \"OpenAItts\",\n    \"pluginId\": \"mk.openai.tts\",\n    \"author\": \"mkXultra\",\n    \"description\": \"OpenAI Text-to-Speech API\",\n    \"version\": 1,\n\n    \"vars\": {\n        apiKey: {label: \"API Key\"}\n    },\n\n    \"getAudio\": function (text, locale, voice, rate, volume, pitch) {\n        return getAudio(text, voice, rate, volume, pitch)\n    },\n}\n\nfunction getAudio(text, voice, rate, volume, pitch) {\n    if (voice === null || voice === \"\") {\n        voice = \"alloy\"\n    }\n    if (rate === null || rate === \"\") {\n        rate = 1\n    }\n    let url = \"wss://api.openai.com/v1/audio/speech\"\n    let ws = null\n\n    let pos = new java.io.PipedOutputStream()\n\n    function connectWebSocket() {\n        ws = JWebSocket(new java.lang.String(url), {\n            \"Authorization\": \"Bearer \" + apiKey,\n            \"Content-Type\": \"application/json\"\n        })\n\n        ws.onOpen = function (response) {\n            logger.i(\"WebSocket opened: \" + response)\n            sendMessage()\n        }\n\n        ws.onFailure = function (t) {\n            logger.e(\"WebSocket failure: \" + t)\n            pos.close()\n            throw \"WebSocket failure: \" + t\n        }\n\n        ws.onTextMessage = function (str) {\n            let result = JSON.parse(str)\n            if (result.audio) {\n                let audio = ttsrv.base64DecodeToBytes(result.audio)\n                pos.write(audio)\n            }\n            if (result.status === \"done\") {\n                pos.close()\n                ws.close(1000)\n            }\n        }\n\n        ws.onClosing = function (code, reason) {\n            logger.i(\"WebSocket closing: \" + code + \" \" + reason)\n        }\n\n        ws.onClosed = function (code, reason) {\n            logger.i(\"WebSocket closed: \" + code + \" \" + reason)\n            pos.close()\n        }\n\n        ws.connect()\n    }\n\n    function sendMessage() {\n        let message = JSON.stringify({\n            model: \"tts-1\",\n            input: text,\n            voice: voice,\n            response_format: \"aac\",\n            speed: rate\n        })\n        ws.send(message)\n    }\n\n    connectWebSocket()\n\n    return new java.io.PipedInputStream(pos)\n}\n\nlet EditorJS = {\n    \"getAudioSampleRate\": function (locale, voice) {\n        return sampleRate\n    },\n\n    \"getLocales\": function () {\n        return [\"en-US\"]\n    },\n\n    \"getVoices\": function (locale) {\n        return {\n            \"alloy\": \"Alloy\",\n            \"echo\": \"Echo\",\n            \"fable\": \"Fable\",\n            \"onyx\": \"Onyx\",\n            \"nova\": \"Nova\",\n            \"shimmer\": \"Shimmer\"\n        }\n    },\n\n    \"onLoadData\": function () {},\n\n    \"onLoadUI\": function (ctx, linerLayout) {\n        let cb = new CheckBox(ctx)\n        cb.setText(\"Background music (only supported for special voices)\")\n        cb.setChecked(ttsrv.tts.data[\"bgm\"] == \"true\")\n        cb.setOnCheckedChangeListener(function (view, isChecked) {\n            ttsrv.tts.data[\"bgm\"] = isChecked + ''\n        })\n        linerLayout.addView(cb)\n        ttsrv.setMargins(cb, 0, 8, 10, 0)\n    },\n\n    \"onVoiceChanged\": function (locale, voiceCode) {\n\n    }\n}"
  }
]
