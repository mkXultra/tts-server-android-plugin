[
  {
    "version": 2,
    "name": "OpenAItts",
    "pluginId": "mk.openai.tts",
    "author": "mkXultra",
    "defVars": {
      "apiKey": {
        "label": "ApiKey"
      }
    },
    "code": "let apiKey = ttsrv.userVars[\"apiKey\"]\nlet sampleRate = 16000\n\nlet PluginJS = {\n    \"name\": \"OpenAItts\",\n    \"pluginId\": \"mk.openai.tts\",\n    \"author\": \"mkXultra\",\n    \"description\": \"OpenAI Text-to-Speech API\",\n    \"version\": 1,\n\n    \"vars\": {\n        apiKey: {label: \"API-KEY\", hint: \"OpenAI API-KEY\"},\n    },\n\n    \"getAudio\": function (text, locale, voice, rate, volume, pitch) {\n        return getAudio(text, voice, rate, volume, pitch)\n    },\n}\n\nfunction getAudio(text, voice, rate, volume, pitch) {\n    logger.i(\"getAudio\")\n    logger.i(\"rate: \" + rate)\n    let speed = rate\n    if (voice === null || voice === \"\") {\n        voice = \"alloy\"\n    }\n    if (rate === null || rate === \"\" || rate === 0) {\n        speed = 1\n    } else{\n        // 50% = 1\n        speed = (parseFloat(rate) / 50)\n        // Ensure rate is within the valid range\n        speed = Math.max(0.25, Math.min(4.0, parseFloat(speed)))\n    }\n    logger.i(\"speed: \" + speed)\n\n    let reqHeaders = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + apiKey\n    }\n\n    let body = {\n        \"model\": \"tts-1\",\n        \"input\": text,\n        \"voice\": voice,\n        \"response_format\": \"opus\",\n        \"speed\": speed\n    }\n    let str = JSON.stringify(body)\n    let resp = ttsrv.httpPost('https://api.openai.com/v1/audio/speech', str, reqHeaders)\n\n    if (resp.isSuccessful()) {\n        return resp.body().byteStream()\n    } else {\n        throw \"FAILED: status=\" + resp.code() + \" body=\" + resp.body() + \" params=\" + \"text=\" + text + \" voice=\" + voice + \" rate=\" + rate + \" volume=\" + volume + \" pitch=\" + pitch\n    }\n}\n\nlet EditorJS = {\n    'getAudioSampleRate': function (locale, voice) {\n         let audio = PluginJS.getAudio('test', locale, voice, 50, 50, 50)\n         return ttsrv.getAudioSampleRate(audio)\n//        return 22050\n    },\n\n    \"getLocales\": function () {\n        return [\"en-US\"]\n    },\n\n    \"getVoices\": function (locale) {\n        return {\n            \"alloy\": \"Alloy\",\n            \"echo\": \"Echo\",\n            \"fable\": \"Fable\",\n            \"onyx\": \"Onyx\",\n            \"nova\": \"Nova\",\n            \"shimmer\": \"Shimmer\"\n        }\n    },\n\n    \"onLoadData\": function () {},\n\n    \"onLoadUI\": function (ctx, linerLayout) {\n        let cb = new CheckBox(ctx)\n        cb.setText(\"Background music (only supported for special voices)\")\n        cb.setChecked(ttsrv.tts.data[\"bgm\"] == \"true\")\n        cb.setOnCheckedChangeListener(function (view, isChecked) {\n            ttsrv.tts.data[\"bgm\"] = isChecked + ''\n        })\n        linerLayout.addView(cb)\n        ttsrv.setMargins(cb, 0, 8, 10, 0)\n    },\n\n    \"onVoiceChanged\": function (locale, voiceCode) {\n\n    }\n}"
  }
]
